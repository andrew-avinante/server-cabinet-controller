
ServerCabinet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800382c  0800382c  0000482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003858  08003858  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003858  08003858  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003858  08003858  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003858  08003858  00004858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003860  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000010  08003870  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003870  000051e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ee6  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8d  00000000  00000000  0000df1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0000fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f6  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177da  00000000  00000000  00010cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bae7  00000000  00000000  000284d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088625  00000000  00000000  00033fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc5dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000bc620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000bf184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003814 	.word	0x08003814

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003814 	.word	0x08003814

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000766:	f002 f923 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 800076a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 800076c:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <ARGB_Init+0xd8>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <ARGB_Init+0x1c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <ARGB_Init+0x1e>
 800077c:	2302      	movs	r3, #2
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	fb02 f303 	mul.w	r3, r2, r3
 8000786:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	4a2b      	ldr	r2, [pc, #172]	@ (800083c <ARGB_Init+0xdc>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000796:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <ARGB_Init+0xe0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <ARGB_Init+0xe0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <ARGB_Init+0xe0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.68) - 1;     // Log.1 - 56% - 0.70us
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff37 	bl	8000628 <__aeabi_ui2d>
 80007ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8000828 <ARGB_Init+0xc8>)
 80007bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c0:	f7ff fcc6 	bl	8000150 <__aeabi_dmul>
 80007c4:	4602      	mov	r2, r0
 80007c6:	460b      	mov	r3, r1
 80007c8:	4610      	mov	r0, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	f7ff ffa6 	bl	800071c <__aeabi_d2uiz>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <ARGB_Init+0xe4>)
 80007da:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.32) - 1;     // Log.0 - 28% - 0.35us
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff23 	bl	8000628 <__aeabi_ui2d>
 80007e2:	a313      	add	r3, pc, #76	@ (adr r3, 8000830 <ARGB_Init+0xd0>)
 80007e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e8:	f7ff fcb2 	bl	8000150 <__aeabi_dmul>
 80007ec:	4602      	mov	r2, r0
 80007ee:	460b      	mov	r3, r1
 80007f0:	4610      	mov	r0, r2
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff ff92 	bl	800071c <__aeabi_d2uiz>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <ARGB_Init+0xe8>)
 8000802:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <ARGB_Init+0xec>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <ARGB_Init+0xe0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2201      	movs	r2, #1
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fefe 	bl	8003614 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000818:	2001      	movs	r0, #1
 800081a:	f000 ffe3 	bl	80017e4 <HAL_Delay>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	5c28f5c3 	.word	0x5c28f5c3
 800082c:	3fe5c28f 	.word	0x3fe5c28f
 8000830:	47ae147b 	.word	0x47ae147b
 8000834:	3fd47ae1 	.word	0x3fd47ae1
 8000838:	40021000 	.word	0x40021000
 800083c:	014f8b59 	.word	0x014f8b59
 8000840:	2000010c 	.word	0x2000010c
 8000844:	2000002c 	.word	0x2000002c
 8000848:	2000002d 	.word	0x2000002d
 800084c:	2000010a 	.word	0x2000010a

08000850 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f88f 	bl	800097c <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <ARGB_SetBrightness+0x1c>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	7013      	strb	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000

08000884 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	4611      	mov	r1, r2
 8000890:	461a      	mov	r2, r3
 8000892:	4623      	mov	r3, r4
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	4603      	mov	r3, r0
 8000898:	717b      	strb	r3, [r7, #5]
 800089a:	460b      	mov	r3, r1
 800089c:	713b      	strb	r3, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b06      	cmp	r3, #6
 80008a6:	d910      	bls.n	80008ca <ARGB_SetRGB+0x46>
        u16_t _i = i / NUM_PIXELS;
 80008a8:	88fa      	ldrh	r2, [r7, #6]
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <ARGB_SetRGB+0xec>)
 80008ac:	fba3 1302 	umull	r1, r3, r3, r2
 80008b0:	1ad2      	subs	r2, r2, r3
 80008b2:	0852      	lsrs	r2, r2, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	461a      	mov	r2, r3
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	4413      	add	r3, r2
 80008c8:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <ARGB_SetRGB+0xf0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008da:	797a      	ldrb	r2, [r7, #5]
 80008dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80008e0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <ARGB_SetRGB+0xf0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80008f2:	793a      	ldrb	r2, [r7, #4]
 80008f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80008f8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <ARGB_SetRGB+0xf0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3301      	adds	r3, #1
 8000902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000906:	fb92 f3f3 	sdiv	r3, r2, r3
 800090a:	78fa      	ldrb	r2, [r7, #3]
 800090c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000910:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000912:	793b      	ldrb	r3, [r7, #4]
 8000914:	21b0      	movs	r1, #176	@ 0xb0
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f9bc 	bl	8000c94 <scale8>
 800091c:	4603      	mov	r3, r0
 800091e:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	21f0      	movs	r1, #240	@ 0xf0
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f9b5 	bl	8000c94 <scale8>
 800092a:	4603      	mov	r3, r0
 800092c:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <ARGB_SetRGB+0xf4>)
 8000944:	7b7a      	ldrb	r2, [r7, #13]
 8000946:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	3301      	adds	r3, #1
 8000952:	4909      	ldr	r1, [pc, #36]	@ (8000978 <ARGB_SetRGB+0xf4>)
 8000954:	7b3a      	ldrb	r2, [r7, #12]
 8000956:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	3302      	adds	r3, #2
 8000962:	4905      	ldr	r1, [pc, #20]	@ (8000978 <ARGB_SetRGB+0xf4>)
 8000964:	7afa      	ldrb	r2, [r7, #11]
 8000966:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	24924925 	.word	0x24924925
 8000974:	20000000 	.word	0x20000000
 8000978:	20000030 	.word	0x20000030

0800097c <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	460b      	mov	r3, r1
 8000988:	71bb      	strb	r3, [r7, #6]
 800098a:	4613      	mov	r3, r2
 800098c:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	e00b      	b.n	80009ac <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000994:	89fb      	ldrh	r3, [r7, #14]
 8000996:	b298      	uxth	r0, r3
 8000998:	797b      	ldrb	r3, [r7, #5]
 800099a:	79ba      	ldrb	r2, [r7, #6]
 800099c:	79f9      	ldrb	r1, [r7, #7]
 800099e:	f7ff ff71 	bl	8000884 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	81fb      	strh	r3, [r7, #14]
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	d9ef      	bls.n	8000994 <ARGB_FillRGB+0x18>
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80009c6:	4b9c      	ldr	r3, [pc, #624]	@ (8000c38 <ARGB_Show+0x278>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80009cc:	4b9b      	ldr	r3, [pc, #620]	@ (8000c3c <ARGB_Show+0x27c>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <ARGB_Show+0x22>
 80009d6:	4b9a      	ldr	r3, [pc, #616]	@ (8000c40 <ARGB_Show+0x280>)
 80009d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d001      	beq.n	80009e6 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e14f      	b.n	8000c86 <ARGB_Show+0x2c6>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e0a6      	b.n	8000b3a <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80009ec:	4b95      	ldr	r3, [pc, #596]	@ (8000c44 <ARGB_Show+0x284>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dd04      	ble.n	8000a0e <ARGB_Show+0x4e>
 8000a04:	4b90      	ldr	r3, [pc, #576]	@ (8000c48 <ARGB_Show+0x288>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	e003      	b.n	8000a16 <ARGB_Show+0x56>
 8000a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8000c4c <ARGB_Show+0x28c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8000c50 <ARGB_Show+0x290>)
 8000a1e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000a22:	4b88      	ldr	r3, [pc, #544]	@ (8000c44 <ARGB_Show+0x284>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dd04      	ble.n	8000a44 <ARGB_Show+0x84>
 8000a3a:	4b83      	ldr	r3, [pc, #524]	@ (8000c48 <ARGB_Show+0x288>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4619      	mov	r1, r3
 8000a42:	e003      	b.n	8000a4c <ARGB_Show+0x8c>
 8000a44:	4b81      	ldr	r3, [pc, #516]	@ (8000c4c <ARGB_Show+0x28c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	3308      	adds	r3, #8
 8000a52:	4a7f      	ldr	r2, [pc, #508]	@ (8000c50 <ARGB_Show+0x290>)
 8000a54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000a58:	4b7a      	ldr	r3, [pc, #488]	@ (8000c44 <ARGB_Show+0x284>)
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd04      	ble.n	8000a7a <ARGB_Show+0xba>
 8000a70:	4b75      	ldr	r3, [pc, #468]	@ (8000c48 <ARGB_Show+0x288>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	e003      	b.n	8000a82 <ARGB_Show+0xc2>
 8000a7a:	4b74      	ldr	r3, [pc, #464]	@ (8000c4c <ARGB_Show+0x28c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	3310      	adds	r3, #16
 8000a88:	4a71      	ldr	r2, [pc, #452]	@ (8000c50 <ARGB_Show+0x290>)
 8000a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c44 <ARGB_Show+0x284>)
 8000a90:	78db      	ldrb	r3, [r3, #3]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dd04      	ble.n	8000ab0 <ARGB_Show+0xf0>
 8000aa6:	4b68      	ldr	r3, [pc, #416]	@ (8000c48 <ARGB_Show+0x288>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	e003      	b.n	8000ab8 <ARGB_Show+0xf8>
 8000ab0:	4b66      	ldr	r3, [pc, #408]	@ (8000c4c <ARGB_Show+0x28c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	3318      	adds	r3, #24
 8000abe:	4a64      	ldr	r2, [pc, #400]	@ (8000c50 <ARGB_Show+0x290>)
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c44 <ARGB_Show+0x284>)
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd04      	ble.n	8000ae6 <ARGB_Show+0x126>
 8000adc:	4b5a      	ldr	r3, [pc, #360]	@ (8000c48 <ARGB_Show+0x288>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	e003      	b.n	8000aee <ARGB_Show+0x12e>
 8000ae6:	4b59      	ldr	r3, [pc, #356]	@ (8000c4c <ARGB_Show+0x28c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3320      	adds	r3, #32
 8000af4:	4a56      	ldr	r2, [pc, #344]	@ (8000c50 <ARGB_Show+0x290>)
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000afa:	4b52      	ldr	r3, [pc, #328]	@ (8000c44 <ARGB_Show+0x284>)
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dd04      	ble.n	8000b1c <ARGB_Show+0x15c>
 8000b12:	4b4d      	ldr	r3, [pc, #308]	@ (8000c48 <ARGB_Show+0x288>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e003      	b.n	8000b24 <ARGB_Show+0x164>
 8000b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c4c <ARGB_Show+0x28c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	3328      	adds	r3, #40	@ 0x28
 8000b2a:	4a49      	ldr	r2, [pc, #292]	@ (8000c50 <ARGB_Show+0x290>)
 8000b2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	f67f af54 	bls.w	80009ec <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000b48:	e095      	b.n	8000c76 <ARGB_Show+0x2b6>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000b4a:	4b42      	ldr	r3, [pc, #264]	@ (8000c54 <ARGB_Show+0x294>)
 8000b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d102      	bne.n	8000b5c <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000b56:	2302      	movs	r3, #2
 8000b58:	73fb      	strb	r3, [r7, #15]
                continue;
 8000b5a:	e08c      	b.n	8000c76 <ARGB_Show+0x2b6>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c54 <ARGB_Show+0x294>)
 8000b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d11d      	bne.n	8000ba4 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000b68:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <ARGB_Show+0x294>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000b70:	4b38      	ldr	r3, [pc, #224]	@ (8000c54 <ARGB_Show+0x294>)
 8000b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b74:	4a38      	ldr	r2, [pc, #224]	@ (8000c58 <ARGB_Show+0x298>)
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000b78:	4b36      	ldr	r3, [pc, #216]	@ (8000c54 <ARGB_Show+0x294>)
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7c:	4a37      	ldr	r2, [pc, #220]	@ (8000c5c <ARGB_Show+0x29c>)
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <ARGB_Show+0x294>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b84:	4a36      	ldr	r2, [pc, #216]	@ (8000c60 <ARGB_Show+0x2a0>)
 8000b86:	631a      	str	r2, [r3, #48]	@ 0x30
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000b88:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <ARGB_Show+0x294>)
 8000b8a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b8c:	4930      	ldr	r1, [pc, #192]	@ (8000c50 <ARGB_Show+0x290>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000b8e:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <ARGB_Show+0x294>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3334      	adds	r3, #52	@ 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000b94:	461a      	mov	r2, r3
 8000b96:	2330      	movs	r3, #48	@ 0x30
 8000b98:	f000 ffb0 	bl	8001afc <HAL_DMA_Start_IT>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <ARGB_Show+0x1f0>
 8000ba2:	e002      	b.n	8000baa <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
                continue;
 8000ba8:	e065      	b.n	8000c76 <ARGB_Show+0x2b6>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
                continue;
 8000bae:	e062      	b.n	8000c76 <ARGB_Show+0x2b6>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <ARGB_Show+0x294>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <ARGB_Show+0x294>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000bbe:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <ARGB_Show+0x294>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	@ (8000c64 <ARGB_Show+0x2a4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d107      	bne.n	8000bda <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000bca:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <ARGB_Show+0x294>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000bd0:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <ARGB_Show+0x294>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bd8:	645a      	str	r2, [r3, #68]	@ 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <ARGB_Show+0x294>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <ARGB_Show+0x2a4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00e      	beq.n	8000c02 <ARGB_Show+0x242>
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <ARGB_Show+0x294>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bec:	d009      	beq.n	8000c02 <ARGB_Show+0x242>
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <ARGB_Show+0x294>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <ARGB_Show+0x2a8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d004      	beq.n	8000c02 <ARGB_Show+0x242>
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <ARGB_Show+0x294>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <ARGB_Show+0x2ac>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d111      	bne.n	8000c26 <ARGB_Show+0x266>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <ARGB_Show+0x294>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	d02d      	beq.n	8000c70 <ARGB_Show+0x2b0>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <ARGB_Show+0x294>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <ARGB_Show+0x294>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000c24:	e024      	b.n	8000c70 <ARGB_Show+0x2b0>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <ARGB_Show+0x294>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <ARGB_Show+0x294>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0201 	orr.w	r2, r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e01c      	b.n	8000c72 <ARGB_Show+0x2b2>
 8000c38:	2000010a 	.word	0x2000010a
 8000c3c:	20000108 	.word	0x20000108
 8000c40:	2000019c 	.word	0x2000019c
 8000c44:	20000030 	.word	0x20000030
 8000c48:	2000002c 	.word	0x2000002c
 8000c4c:	2000002d 	.word	0x2000002d
 8000c50:	20000048 	.word	0x20000048
 8000c54:	2000010c 	.word	0x2000010c
 8000c58:	08000cbd 	.word	0x08000cbd
 8000c5c:	08000f6d 	.word	0x08000f6d
 8000c60:	08003081 	.word	0x08003081
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40000800 	.word	0x40000800
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000c70:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f af66 	bne.w	8000b4a <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <ARGB_Show+0x2d0>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8000c84:	2302      	movs	r3, #2
    }
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000108 	.word	0x20000108

08000c94 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	79ba      	ldrb	r2, [r7, #6]
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	121b      	asrs	r3, r3, #8
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a9d      	ldr	r2, [pc, #628]	@ (8000f44 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f040 8131 	bne.w	8000f36 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a9c      	ldr	r2, [pc, #624]	@ (8000f48 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f040 812c 	bne.w	8000f36 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8000cde:	4b9b      	ldr	r3, [pc, #620]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 8128 	beq.w	8000f3a <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d10b      	bne.n	8000d0c <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d136      	bne.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000d0a:	e031      	b.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10b      	bne.n	8000d2e <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d125      	bne.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000d2c:	e020      	b.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d10b      	bne.n	8000d50 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d114      	bne.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000d4e:	e00f      	b.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d10a      	bne.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8000d70:	4b76      	ldr	r3, [pc, #472]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d87b      	bhi.n	8000e72 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72fb      	strb	r3, [r7, #11]
 8000d7e:	e06c      	b.n	8000e5a <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000d80:	4b72      	ldr	r3, [pc, #456]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a70      	ldr	r2, [pc, #448]	@ (8000f50 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dd04      	ble.n	8000db0 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8000da6:	4b6b      	ldr	r3, [pc, #428]	@ (8000f54 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	e003      	b.n	8000db8 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8000db0:	4b69      	ldr	r3, [pc, #420]	@ (8000f58 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	4a67      	ldr	r2, [pc, #412]	@ (8000f5c <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8000dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000dc4:	4b61      	ldr	r3, [pc, #388]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8000f50 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd04      	ble.n	8000df6 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8000dec:	4b59      	ldr	r3, [pc, #356]	@ (8000f54 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	e003      	b.n	8000dfe <ARGB_TIM_DMADelayPulseCplt+0x142>
 8000df6:	4b58      	ldr	r3, [pc, #352]	@ (8000f58 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3320      	adds	r3, #32
 8000e04:	4a55      	ldr	r2, [pc, #340]	@ (8000f5c <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e0a:	4b50      	ldr	r3, [pc, #320]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f50 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	dd04      	ble.n	8000e3c <ARGB_TIM_DMADelayPulseCplt+0x180>
 8000e32:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	e003      	b.n	8000e44 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8000e3c:	4b46      	ldr	r3, [pc, #280]	@ (8000f58 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3328      	adds	r3, #40	@ 0x28
 8000e4a:	4a44      	ldr	r2, [pc, #272]	@ (8000f5c <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8000e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	72fb      	strb	r3, [r7, #11]
 8000e5a:	7afb      	ldrb	r3, [r7, #11]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b07      	cmp	r3, #7
 8000e60:	d98e      	bls.n	8000d80 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8000e62:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b37      	ldr	r3, [pc, #220]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e6e:	801a      	strh	r2, [r3, #0]
 8000e70:	e05d      	b.n	8000f2e <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8000e72:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d80c      	bhi.n	8000e96 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8000e7c:	2260      	movs	r2, #96	@ 0x60
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4837      	ldr	r0, [pc, #220]	@ (8000f60 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8000e82:	f002 fc9a 	bl	80037ba <memset>
        BUF_COUNTER++;
 8000e86:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	e04b      	b.n	8000f2e <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
        // STOP DMA:
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000eaa:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fe83 	bl	8001bbc <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	@ (8000f64 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d117      	bne.n	8000ef0 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10f      	bne.n	8000ef0 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	f240 4344 	movw	r3, #1092	@ 0x444
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d107      	bne.n	8000ef0 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000eee:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10f      	bne.n	8000f20 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6a1a      	ldr	r2, [r3, #32]
 8000f06:	f240 4344 	movw	r3, #1092	@ 0x444
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d107      	bne.n	8000f20 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ARGB_LOC_ST = ARGB_READY;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	771a      	strb	r2, [r3, #28]
 8000f34:	e002      	b.n	8000f3c <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8000f3a:	bf00      	nop
}
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000019c 	.word	0x2000019c
 8000f48:	2000010c 	.word	0x2000010c
 8000f4c:	20000108 	.word	0x20000108
 8000f50:	20000030 	.word	0x20000030
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	2000002d 	.word	0x2000002d
 8000f5c:	20000048 	.word	0x20000048
 8000f60:	200000a8 	.word	0x200000a8
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	2000010a 	.word	0x2000010a

08000f6c <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f78:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a53      	ldr	r2, [pc, #332]	@ (80010cc <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 809e 	bne.w	80010c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a52      	ldr	r2, [pc, #328]	@ (80010d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	f040 8099 	bne.w	80010c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8000f8e:	4b51      	ldr	r3, [pc, #324]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 8095 	beq.w	80010c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d87b      	bhi.n	800109c <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	72fb      	strb	r3, [r7, #11]
 8000fa8:	e06c      	b.n	8001084 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000faa:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a47      	ldr	r2, [pc, #284]	@ (80010d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd04      	ble.n	8000fda <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	e003      	b.n	8000fe2 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8000fda:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8000fea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000fee:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd04      	ble.n	8001020 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	e003      	b.n	8001028 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001020:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4619      	mov	r1, r3
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3308      	adds	r3, #8
 800102e:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001034:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	3302      	adds	r3, #2
 8001044:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001058:	2b00      	cmp	r3, #0
 800105a:	dd04      	ble.n	8001066 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	e003      	b.n	800106e <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	7afb      	ldrb	r3, [r7, #11]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3310      	adds	r3, #16
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72fb      	strb	r3, [r7, #11]
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b07      	cmp	r3, #7
 800108a:	d98e      	bls.n	8000faa <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	e014      	b.n	80010c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d80f      	bhi.n	80010c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80010a6:	2260      	movs	r2, #96	@ 0x60
 80010a8:	2100      	movs	r1, #0
 80010aa:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80010ac:	f002 fb85 	bl	80037ba <memset>
        BUF_COUNTER++;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3301      	adds	r3, #1
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	e002      	b.n	80010c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80010c4:	bf00      	nop
    }
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000019c 	.word	0x2000019c
 80010d0:	2000010c 	.word	0x2000010c
 80010d4:	20000108 	.word	0x20000108
 80010d8:	20000030 	.word	0x20000030
 80010dc:	2000002c 	.word	0x2000002c
 80010e0:	2000002d 	.word	0x2000002d
 80010e4:	20000048 	.word	0x20000048

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fb18 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f82c 	bl	800114c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 f9aa 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 80010f8:	f000 f98a 	bl	8001410 <MX_DMA_Init>
  MX_TIM1_Init();
 80010fc:	f000 f86c 	bl	80011d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001100:	f000 f912 	bl	8001328 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR1 = 5;
 8001104:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001108:	2205      	movs	r2, #5
 800110a:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800110c:	2100      	movs	r1, #0
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <main+0x60>)
 8001110:	f001 fd28 	bl	8002b64 <HAL_TIM_PWM_Start>
  ARGB_Init();  // Initialization
 8001114:	f7ff fb24 	bl	8000760 <ARGB_Init>
  ARGB_SetBrightness(100);  // Set global brightness to 40%
 8001118:	2064      	movs	r0, #100	@ 0x64
 800111a:	f7ff fba3 	bl	8000864 <ARGB_SetBrightness>
  ARGB_Clear(); // Clear stirp
 800111e:	f7ff fb97 	bl	8000850 <ARGB_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001122:	bf00      	nop
 8001124:	f7ff fc4c 	bl	80009c0 <ARGB_Show>
 8001128:	4603      	mov	r3, r0
 800112a:	2b02      	cmp	r3, #2
 800112c:	d1fa      	bne.n	8001124 <main+0x3c>



	      ARGB_FillRGB(0, 0, 200); // Fill all the strip with Red
 800112e:	22c8      	movs	r2, #200	@ 0xc8
 8001130:	2100      	movs	r1, #0
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fc22 	bl	800097c <ARGB_FillRGB>
	      while (!ARGB_Show());
 8001138:	bf00      	nop
 800113a:	f7ff fc41 	bl	80009c0 <ARGB_Show>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0fa      	beq.n	800113a <main+0x52>
	  while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001144:	e7ed      	b.n	8001122 <main+0x3a>
 8001146:	bf00      	nop
 8001148:	20000154 	.word	0x20000154

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fb2d 	bl	80037ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001184:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800118a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800118e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f841 	bl	800221c <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011a0:	f000 f976 	bl	8001490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 faae 	bl	8002720 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ca:	f000 f961 	bl	8001490 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3740      	adds	r7, #64	@ 0x40
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	@ 0x58
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fad2 	bl	80037ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001218:	4a42      	ldr	r2, [pc, #264]	@ (8001324 <MX_TIM1_Init+0x14c>)
 800121a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_TIM1_Init+0x148>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b3f      	ldr	r3, [pc, #252]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001228:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_TIM1_Init+0x148>)
 800122a:	2259      	movs	r2, #89	@ 0x59
 800122c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <MX_TIM1_Init+0x148>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001240:	4837      	ldr	r0, [pc, #220]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001242:	f001 fbe7 	bl	8002a14 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800124c:	f000 f920 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800125a:	4619      	mov	r1, r3
 800125c:	4830      	ldr	r0, [pc, #192]	@ (8001320 <MX_TIM1_Init+0x148>)
 800125e:	f001 fe3f 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001268:	f000 f912 	bl	8001490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126c:	482c      	ldr	r0, [pc, #176]	@ (8001320 <MX_TIM1_Init+0x148>)
 800126e:	f001 fc20 	bl	8002ab2 <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001278:	f000 f90a 	bl	8001490 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800127c:	2108      	movs	r1, #8
 800127e:	4828      	ldr	r0, [pc, #160]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001280:	f001 fd12 	bl	8002ca8 <HAL_TIM_OnePulse_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800128a:	f000 f901 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001296:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129a:	4619      	mov	r1, r3
 800129c:	4820      	ldr	r0, [pc, #128]	@ (8001320 <MX_TIM1_Init+0x148>)
 800129e:	f002 f9dd 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80012a8:	f000 f8f2 	bl	8001490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ac:	2360      	movs	r3, #96	@ 0x60
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	@ (8001320 <MX_TIM1_Init+0x148>)
 80012d2:	f001 fd43 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80012dc:	f000 f8d8 	bl	8001490 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4807      	ldr	r0, [pc, #28]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001304:	f002 fa08 	bl	8003718 <HAL_TIMEx_ConfigBreakDeadTime>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800130e:	f000 f8bf 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001312:	4803      	ldr	r0, [pc, #12]	@ (8001320 <MX_TIM1_Init+0x148>)
 8001314:	f000 f950 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 8001318:	bf00      	nop
 800131a:	3758      	adds	r7, #88	@ 0x58
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000010c 	.word	0x2000010c
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_TIM2_Init+0xe4>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_TIM2_Init+0xe4>)
 8001362:	2247      	movs	r2, #71	@ 0x47
 8001364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <MX_TIM2_Init+0xe4>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_TIM2_Init+0xe4>)
 800136e:	2227      	movs	r2, #39	@ 0x27
 8001370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <MX_TIM2_Init+0xe4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <MX_TIM2_Init+0xe4>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137e:	4823      	ldr	r0, [pc, #140]	@ (800140c <MX_TIM2_Init+0xe4>)
 8001380:	f001 fb48 	bl	8002a14 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800138a:	f000 f881 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	481c      	ldr	r0, [pc, #112]	@ (800140c <MX_TIM2_Init+0xe4>)
 800139c:	f001 fda0 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013a6:	f000 f873 	bl	8001490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013aa:	4818      	ldr	r0, [pc, #96]	@ (800140c <MX_TIM2_Init+0xe4>)
 80013ac:	f001 fb81 	bl	8002ab2 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013b6:	f000 f86b 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4619      	mov	r1, r3
 80013c8:	4810      	ldr	r0, [pc, #64]	@ (800140c <MX_TIM2_Init+0xe4>)
 80013ca:	f002 f947 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013d4:	f000 f85c 	bl	8001490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	@ 0x60
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_TIM2_Init+0xe4>)
 80013f0:	f001 fcb4 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013fa:	f000 f849 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013fe:	4803      	ldr	r0, [pc, #12]	@ (800140c <MX_TIM2_Init+0xe4>)
 8001400:	f000 f8da 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	@ 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000154 	.word	0x20000154

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_DMA_Init+0x38>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <MX_DMA_Init+0x38>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6153      	str	r3, [r2, #20]
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_DMA_Init+0x38>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	200c      	movs	r0, #12
 8001434:	f000 fad1 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001438:	200c      	movs	r0, #12
 800143a:	f000 faea 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_GPIO_Init+0x40>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <MX_GPIO_Init+0x40>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_GPIO_Init+0x40>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_GPIO_Init+0x40>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a07      	ldr	r2, [pc, #28]	@ (800148c <MX_GPIO_Init+0x40>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <MX_GPIO_Init+0x40>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <Error_Handler+0x8>

0800149c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_MspInit+0x60>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_MspInit+0x60>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_TIM_Base_MspInit+0xa8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d134      	bne.n	800157c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 8001518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151c:	6193      	str	r3, [r2, #24]
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 800152c:	4a21      	ldr	r2, [pc, #132]	@ (80015b4 <HAL_TIM_Base_MspInit+0xb4>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001532:	2210      	movs	r2, #16
 8001534:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001548:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 800154c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001554:	2220      	movs	r2, #32
 8001556:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001560:	f000 fa72 	bl	8001a48 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800156a:	f7ff ff91 	bl	8001490 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
 8001574:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800157a:	e010      	b.n	800159e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001584:	d10b      	bne.n	800159e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_TIM_Base_MspInit+0xac>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	2000019c 	.word	0x2000019c
 80015b4:	4002001c 	.word	0x4002001c

080015b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001650 <HAL_TIM_MspPostInit+0x98>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d119      	bne.n	800160c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4619      	mov	r1, r3
 8001604:	4814      	ldr	r0, [pc, #80]	@ (8001658 <HAL_TIM_MspPostInit+0xa0>)
 8001606:	f000 fc85 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800160a:	e01c      	b.n	8001646 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001614:	d117      	bne.n	8001646 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_TIM_MspPostInit+0x9c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162e:	2301      	movs	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_TIM_MspPostInit+0xa0>)
 8001642:	f000 fc67 	bl	8001f14 <HAL_GPIO_Init>
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f87e 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <DMA1_Channel2_IRQHandler+0x10>)
 80016ba:	f000 faf7 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000019c 	.word	0x2000019c

080016c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff fff8 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	@ (8001708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016da:	490c      	ldr	r1, [pc, #48]	@ (800170c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f0:	4c09      	ldr	r4, [pc, #36]	@ (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 f865 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001702:	f7ff fcf1 	bl	80010e8 <main>
  bx lr
 8001706:	4770      	bx	lr
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001710:	08003860 	.word	0x08003860
  ldr r2, =_sbss
 8001714:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001718:	200001e4 	.word	0x200001e4

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <HAL_Init+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <HAL_Init+0x28>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f947 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	200f      	movs	r0, #15
 8001738:	f000 f808 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff feae 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f95f 	bl	8001a2e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f927 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	@ (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000004 	.word	0x20000004
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000008 	.word	0x20000008

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x20>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a03      	ldr	r2, [pc, #12]	@ (80017cc <HAL_IncTick+0x20>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	200001e0 	.word	0x200001e0

080017d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b02      	ldr	r3, [pc, #8]	@ (80017e0 <HAL_GetTick+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	200001e0 	.word	0x200001e0

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffe0 	bl	80017d0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__NVIC_EnableIRQ+0x34>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	@ (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff90 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff2d 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff42 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff35 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e043      	b.n	8001ae6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_DMA_Init+0xa8>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <HAL_DMA_Init+0xac>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	009a      	lsls	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <HAL_DMA_Init+0xb0>)
 8001a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a92:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	bffdfff8 	.word	0xbffdfff8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_DMA_Start_IT+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e04b      	b.n	8001bb4 <HAL_DMA_Start_IT+0xb8>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d13a      	bne.n	8001ba6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f9af 	bl	8001eb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 020e 	orr.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00f      	b.n	8001b94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0204 	bic.w	r2, r2, #4
 8001b82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 020a 	orr.w	r2, r2, #10
 8001b92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e005      	b.n	8001bb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e051      	b.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_DMA_Abort_IT+0xd4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d029      	beq.n	8001c5e <HAL_DMA_Abort_IT+0xa2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	@ (8001c94 <HAL_DMA_Abort_IT+0xd8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x9e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	@ (8001c98 <HAL_DMA_Abort_IT+0xdc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x98>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_DMA_Abort_IT+0xe0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d012      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x92>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <HAL_DMA_Abort_IT+0xe4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x8c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <HAL_DMA_Abort_IT+0xe8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <HAL_DMA_Abort_IT+0x86>
 8001c3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c40:	e00e      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c46:	e00b      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	e008      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	e005      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c58:	e002      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	e000      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <HAL_DMA_Abort_IT+0xec>)
 8001c62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    } 
  }
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020008 	.word	0x40020008
 8001c94:	4002001c 	.word	0x4002001c
 8001c98:	40020030 	.word	0x40020030
 8001c9c:	40020044 	.word	0x40020044
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	4002006c 	.word	0x4002006c
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2204      	movs	r2, #4
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d04f      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xc8>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d04a      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a66      	ldr	r2, [pc, #408]	@ (8001e9c <HAL_DMA_IRQHandler+0x1f0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d029      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xae>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a65      	ldr	r2, [pc, #404]	@ (8001ea0 <HAL_DMA_IRQHandler+0x1f4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xaa>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a63      	ldr	r2, [pc, #396]	@ (8001ea4 <HAL_DMA_IRQHandler+0x1f8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xa4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a62      	ldr	r2, [pc, #392]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1fc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d012      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x9e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a60      	ldr	r2, [pc, #384]	@ (8001eac <HAL_DMA_IRQHandler+0x200>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x98>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb0 <HAL_DMA_IRQHandler+0x204>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d102      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x92>
 8001d38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d3c:	e00e      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d42:	e00b      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d48:	e008      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d4e:	e005      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d54:	e002      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d56:	2340      	movs	r3, #64	@ 0x40
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_IRQHandler+0xb0>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	4a55      	ldr	r2, [pc, #340]	@ (8001eb4 <HAL_DMA_IRQHandler+0x208>)
 8001d5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8094 	beq.w	8001e92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d72:	e08e      	b.n	8001e92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	2202      	movs	r2, #2
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d056      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x186>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d051      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10b      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 020a 	bic.w	r2, r2, #10
 8001daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a38      	ldr	r2, [pc, #224]	@ (8001e9c <HAL_DMA_IRQHandler+0x1f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d029      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x166>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ea0 <HAL_DMA_IRQHandler+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d022      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x162>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a35      	ldr	r2, [pc, #212]	@ (8001ea4 <HAL_DMA_IRQHandler+0x1f8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x15c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a34      	ldr	r2, [pc, #208]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1fc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d012      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x156>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <HAL_DMA_IRQHandler+0x200>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x150>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <HAL_DMA_IRQHandler+0x204>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x14a>
 8001df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001df4:	e00e      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dfa:	e00b      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e00:	e008      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e06:	e005      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e0c:	e002      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e000      	b.n	8001e14 <HAL_DMA_IRQHandler+0x168>
 8001e12:	2302      	movs	r3, #2
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_DMA_IRQHandler+0x208>)
 8001e16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d034      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e30:	e02f      	b.n	8001e92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	2208      	movs	r2, #8
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d028      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x1e8>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020e 	bic.w	r2, r2, #14
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    }
  }
  return;
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
}
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40020008 	.word	0x40020008
 8001ea0:	4002001c 	.word	0x4002001c
 8001ea4:	40020030 	.word	0x40020030
 8001ea8:	40020044 	.word	0x40020044
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	4002006c 	.word	0x4002006c
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b08b      	sub	sp, #44	@ 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	e169      	b.n	80021fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8158 	bne.w	80021f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a9a      	ldr	r2, [pc, #616]	@ (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d05e      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f50:	4a98      	ldr	r2, [pc, #608]	@ (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d875      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f56:	4a98      	ldr	r2, [pc, #608]	@ (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d058      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f5c:	4a96      	ldr	r2, [pc, #600]	@ (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d86f      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f62:	4a96      	ldr	r2, [pc, #600]	@ (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d052      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f68:	4a94      	ldr	r2, [pc, #592]	@ (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d869      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a94      	ldr	r2, [pc, #592]	@ (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04c      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f74:	4a92      	ldr	r2, [pc, #584]	@ (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d863      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f7a:	4a92      	ldr	r2, [pc, #584]	@ (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d046      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f80:	4a90      	ldr	r2, [pc, #576]	@ (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d85d      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d82a      	bhi.n	8001fe0 <HAL_GPIO_Init+0xcc>
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d859      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <HAL_GPIO_Init+0x80>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	08001fe9 	.word	0x08001fe9
 8001f9c:	08001ffb 	.word	0x08001ffb
 8001fa0:	0800203d 	.word	0x0800203d
 8001fa4:	08002043 	.word	0x08002043
 8001fa8:	08002043 	.word	0x08002043
 8001fac:	08002043 	.word	0x08002043
 8001fb0:	08002043 	.word	0x08002043
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002043 	.word	0x08002043
 8001fbc:	08002043 	.word	0x08002043
 8001fc0:	08002043 	.word	0x08002043
 8001fc4:	08002043 	.word	0x08002043
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	08002043 	.word	0x08002043
 8001fd0:	08002043 	.word	0x08002043
 8001fd4:	08002043 	.word	0x08002043
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	4a79      	ldr	r2, [pc, #484]	@ (80021c8 <HAL_GPIO_Init+0x2b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe6:	e02c      	b.n	8002042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e029      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e024      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	3308      	adds	r3, #8
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e01f      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	330c      	adds	r3, #12
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e01a      	b.n	8002044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002016:	2304      	movs	r3, #4
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e013      	b.n	8002044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	611a      	str	r2, [r3, #16]
          break;
 800202e:	e009      	b.n	8002044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	615a      	str	r2, [r3, #20]
          break;
 800203a:	e003      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x130>
          break;
 8002042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	@ 0xff
 8002048:	d801      	bhi.n	800204e <HAL_GPIO_Init+0x13a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_Init+0x13e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	@ 0xff
 8002058:	d802      	bhi.n	8002060 <HAL_GPIO_Init+0x14c>
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x152>
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	3b08      	subs	r3, #8
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	210f      	movs	r1, #15
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80b1 	beq.w	80021f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002094:	4b4d      	ldr	r3, [pc, #308]	@ (80021cc <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a4c      	ldr	r2, [pc, #304]	@ (80021cc <HAL_GPIO_Init+0x2b8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_GPIO_Init+0x2b8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ac:	4a48      	ldr	r2, [pc, #288]	@ (80021d0 <HAL_GPIO_Init+0x2bc>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	@ (80021d4 <HAL_GPIO_Init+0x2c0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_GPIO_Init+0x1ec>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3f      	ldr	r2, [pc, #252]	@ (80021d8 <HAL_GPIO_Init+0x2c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_Init+0x1e8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3e      	ldr	r2, [pc, #248]	@ (80021dc <HAL_GPIO_Init+0x2c8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1e4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3d      	ldr	r2, [pc, #244]	@ (80021e0 <HAL_GPIO_Init+0x2cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_Init+0x1e0>
 80020f0:	2303      	movs	r3, #3
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 8002100:	2300      	movs	r3, #0
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002112:	492f      	ldr	r1, [pc, #188]	@ (80021d0 <HAL_GPIO_Init+0x2bc>)
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b2d      	ldr	r3, [pc, #180]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	492c      	ldr	r1, [pc, #176]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4928      	ldr	r1, [pc, #160]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4922      	ldr	r1, [pc, #136]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	43db      	mvns	r3, r3
 800216a:	491e      	ldr	r1, [pc, #120]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800216c:	4013      	ands	r3, r2
 800216e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4918      	ldr	r1, [pc, #96]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4914      	ldr	r1, [pc, #80]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d021      	beq.n	80021e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	490e      	ldr	r1, [pc, #56]	@ (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e021      	b.n	80021f6 <HAL_GPIO_Init+0x2e2>
 80021b2:	bf00      	nop
 80021b4:	10320000 	.word	0x10320000
 80021b8:	10310000 	.word	0x10310000
 80021bc:	10220000 	.word	0x10220000
 80021c0:	10210000 	.word	0x10210000
 80021c4:	10120000 	.word	0x10120000
 80021c8:	10110000 	.word	0x10110000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40010800 	.word	0x40010800
 80021d8:	40010c00 	.word	0x40010c00
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4909      	ldr	r1, [pc, #36]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f ae8e 	bne.w	8001f28 <HAL_GPIO_Init+0x14>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	372c      	adds	r7, #44	@ 0x2c
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e272      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800223c:	4b92      	ldr	r3, [pc, #584]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b04      	cmp	r3, #4
 8002246:	d00c      	beq.n	8002262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002248:	4b8f      	ldr	r3, [pc, #572]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
 8002254:	4b8c      	ldr	r3, [pc, #560]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b89      	ldr	r3, [pc, #548]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d06c      	beq.n	8002348 <HAL_RCC_OscConfig+0x12c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d168      	bne.n	8002348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e24c      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x76>
 8002284:	4b80      	ldr	r3, [pc, #512]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7f      	ldr	r2, [pc, #508]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e02e      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b7b      	ldr	r3, [pc, #492]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7a      	ldr	r2, [pc, #488]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b78      	ldr	r3, [pc, #480]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a77      	ldr	r2, [pc, #476]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0xbc>
 80022be:	4b72      	ldr	r3, [pc, #456]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a71      	ldr	r2, [pc, #452]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b68      	ldr	r3, [pc, #416]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a67      	ldr	r2, [pc, #412]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fa6a 	bl	80017d0 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fa66 	bl	80017d0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e200      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b5d      	ldr	r3, [pc, #372]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xe4>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fa56 	bl	80017d0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fa52 	bl	80017d0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1ec      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x10c>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d063      	beq.n	800241e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002356:	4b4c      	ldr	r3, [pc, #304]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002362:	4b49      	ldr	r3, [pc, #292]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b08      	cmp	r3, #8
 800236c:	d11c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
 800236e:	4b46      	ldr	r3, [pc, #280]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1c0      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b3d      	ldr	r3, [pc, #244]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4939      	ldr	r1, [pc, #228]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	e03a      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fa0b 	bl	80017d0 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7ff fa07 	bl	80017d0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e1a1      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4927      	ldr	r1, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b26      	ldr	r3, [pc, #152]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f9ea 	bl	80017d0 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff f9e6 	bl	80017d0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e180      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03a      	beq.n	80024a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_RCC_OscConfig+0x274>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7ff f9ca 	bl	80017d0 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7ff f9c6 	bl	80017d0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e160      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f000 faba 	bl	80029d8 <RCC_Delay>
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_RCC_OscConfig+0x274>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7ff f9b0 	bl	80017d0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002472:	e00f      	b.n	8002494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff f9ac 	bl	80017d0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d908      	bls.n	8002494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e146      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	42420000 	.word	0x42420000
 8002490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b92      	ldr	r3, [pc, #584]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e9      	bne.n	8002474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a6 	beq.w	80025fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b8b      	ldr	r3, [pc, #556]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b88      	ldr	r3, [pc, #544]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a87      	ldr	r2, [pc, #540]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b85      	ldr	r3, [pc, #532]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b82      	ldr	r3, [pc, #520]	@ (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b7f      	ldr	r3, [pc, #508]	@ (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7e      	ldr	r2, [pc, #504]	@ (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff f96d 	bl	80017d0 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff f969 	bl	80017d0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	@ 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e103      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b75      	ldr	r3, [pc, #468]	@ (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x312>
 8002520:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e02d      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002536:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a69      	ldr	r2, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a66      	ldr	r2, [pc, #408]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	e01c      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x356>
 8002558:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a60      	ldr	r2, [pc, #384]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	4b5e      	ldr	r3, [pc, #376]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a5d      	ldr	r2, [pc, #372]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002572:	4b5b      	ldr	r3, [pc, #364]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a5a      	ldr	r2, [pc, #360]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b58      	ldr	r3, [pc, #352]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a57      	ldr	r2, [pc, #348]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff f91d 	bl	80017d0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff f919 	bl	80017d0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0b1      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	4b4b      	ldr	r3, [pc, #300]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ee      	beq.n	800259a <HAL_RCC_OscConfig+0x37e>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff f907 	bl	80017d0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff f903 	bl	80017d0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e09b      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b3c      	ldr	r3, [pc, #240]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a3b      	ldr	r2, [pc, #236]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8087 	beq.w	8002712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d061      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d146      	bne.n	80026a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff f8d7 	bl	80017d0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff f8d3 	bl	80017d0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e06d      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4921      	ldr	r1, [pc, #132]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a19      	ldr	r1, [r3, #32]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	430b      	orrs	r3, r1
 8002672:	491b      	ldr	r1, [pc, #108]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff f8a7 	bl	80017d0 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7ff f8a3 	bl	80017d0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e03d      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x46a>
 80026a4:	e035      	b.n	8002712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff f890 	bl	80017d0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff f88c 	bl	80017d0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e026      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x498>
 80026d2:	e01e      	b.n	8002712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e019      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_OscConfig+0x500>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4965      	ldr	r1, [pc, #404]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a58      	ldr	r2, [pc, #352]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800279e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe ffde 	bl	80017d0 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe ffda 	bl	80017d0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4922      	ldr	r1, [pc, #136]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe ff3c 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	0800382c 	.word	0x0800382c
 80028ec:	20000004 	.word	0x20000004
 80028f0:	20000008 	.word	0x20000008

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x30>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x36>
 8002922:	e027      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	e027      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0c5b      	lsrs	r3, r3, #17
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002956:	fb03 f202 	mul.w	r2, r3, r2
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e004      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	613b      	str	r3, [r7, #16]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	613b      	str	r3, [r7, #16]
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	693b      	ldr	r3, [r7, #16]
}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	08003844 	.word	0x08003844
 8002994:	08003854 	.word	0x08003854
 8002998:	003d0900 	.word	0x003d0900

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b02      	ldr	r3, [pc, #8]	@ (80029ac <HAL_RCC_GetHCLKFreq+0x10>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b4:	f7ff fff2 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	@ (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	0800383c 	.word	0x0800383c

080029d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <RCC_Delay+0x34>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <RCC_Delay+0x38>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0a5b      	lsrs	r3, r3, #9
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f4:	bf00      	nop
  }
  while (Delay --);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	60fa      	str	r2, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <RCC_Delay+0x1c>
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	10624dd3 	.word	0x10624dd3

08002a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e041      	b.n	8002aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fd60 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f000 fb5e 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e041      	b.n	8002b48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f839 	bl	8002b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f000 fb0f 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start+0x24>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e022      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d109      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x3e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e015      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start+0x58>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e008      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e05e      	b.n	8002c94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x82>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be4:	e013      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x92>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf4:	e00b      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c04:	e003      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fcfc 	bl	8003614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c48:	d009      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <HAL_TIM_PWM_Start+0x13c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <HAL_TIM_PWM_Start+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d111      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d010      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	e007      	b.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e041      	b.n	8002d40 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f839 	bl	8002d48 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 fa13 	bl	8003114 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0208 	bic.w	r2, r2, #8
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0ae      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	f200 809f 	bhi.w	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002dc5 	.word	0x08002dc5
 8002d94:	08002ec9 	.word	0x08002ec9
 8002d98:	08002ec9 	.word	0x08002ec9
 8002d9c:	08002ec9 	.word	0x08002ec9
 8002da0:	08002e05 	.word	0x08002e05
 8002da4:	08002ec9 	.word	0x08002ec9
 8002da8:	08002ec9 	.word	0x08002ec9
 8002dac:	08002ec9 	.word	0x08002ec9
 8002db0:	08002e47 	.word	0x08002e47
 8002db4:	08002ec9 	.word	0x08002ec9
 8002db8:	08002ec9 	.word	0x08002ec9
 8002dbc:	08002ec9 	.word	0x08002ec9
 8002dc0:	08002e87 	.word	0x08002e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa04 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]
      break;
 8002e02:	e064      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fa4a 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	619a      	str	r2, [r3, #24]
      break;
 8002e44:	e043      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa93 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0208 	orr.w	r2, r2, #8
 8002e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0204 	bic.w	r2, r2, #4
 8002e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
      break;
 8002e84:	e023      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fadd 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69d9      	ldr	r1, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_ConfigClockSource+0x1c>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0b4      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x186>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f34:	d03e      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	f200 8087 	bhi.w	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f42:	f000 8086 	beq.w	8003052 <HAL_TIM_ConfigClockSource+0x172>
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4a:	d87f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b70      	cmp	r3, #112	@ 0x70
 8002f4e:	d01a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0xa6>
 8002f50:	2b70      	cmp	r3, #112	@ 0x70
 8002f52:	d87b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b60      	cmp	r3, #96	@ 0x60
 8002f56:	d050      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x11a>
 8002f58:	2b60      	cmp	r3, #96	@ 0x60
 8002f5a:	d877      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b50      	cmp	r3, #80	@ 0x50
 8002f5e:	d03c      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xfa>
 8002f60:	2b50      	cmp	r3, #80	@ 0x50
 8002f62:	d873      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d058      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x13a>
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d86f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b30      	cmp	r3, #48	@ 0x30
 8002f6e:	d064      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f70:	2b30      	cmp	r3, #48	@ 0x30
 8002f72:	d86b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d060      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d867      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05c      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d05a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f84:	e062      	b.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f96:	f000 fb1e 	bl	80035d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	609a      	str	r2, [r3, #8]
      break;
 8002fb2:	e04f      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc4:	f000 fb07 	bl	80035d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e03c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 fa7e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2150      	movs	r1, #80	@ 0x50
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fad5 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e02c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	461a      	mov	r2, r3
 8003008:	f000 fa9c 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2160      	movs	r1, #96	@ 0x60
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fac5 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003018:	e01c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	461a      	mov	r2, r3
 8003028:	f000 fa5e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2140      	movs	r1, #64	@ 0x40
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fab5 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003038:	e00c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f000 faac 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 800304a:	e003      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e000      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a6:	e02a      	b.n	80030fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d107      	bne.n	80030c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2202      	movs	r2, #2
 80030b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c0:	e01d      	b.n	80030fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2204      	movs	r2, #4
 80030d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030da:	e010      	b.n	80030fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d107      	bne.n	80030f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2208      	movs	r2, #8
 80030ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030f4:	e003      	b.n	80030fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff ffb5 	bl	800306e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	@ (80031cc <TIM_Base_SetConfig+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a26      	ldr	r2, [pc, #152]	@ (80031d0 <TIM_Base_SetConfig+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	@ (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1c      	ldr	r2, [pc, #112]	@ (80031cc <TIM_Base_SetConfig+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 0201 	bic.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0210 	bic.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800331e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	@ (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0210 	bic.w	r2, r3, #16
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	@ (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e03d      	b.n	80037b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <memset>:
 80037ba:	4603      	mov	r3, r0
 80037bc:	4402      	add	r2, r0
 80037be:	4293      	cmp	r3, r2
 80037c0:	d100      	bne.n	80037c4 <memset+0xa>
 80037c2:	4770      	bx	lr
 80037c4:	f803 1b01 	strb.w	r1, [r3], #1
 80037c8:	e7f9      	b.n	80037be <memset+0x4>
	...

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	@ (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	@ (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 f81a 	bl	8003814 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	@ (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003858 	.word	0x08003858
 8003808:	08003858 	.word	0x08003858
 800380c:	08003858 	.word	0x08003858
 8003810:	0800385c 	.word	0x0800385c

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
